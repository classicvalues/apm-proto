// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: collector.proto
// Original file comments:
// *
// This file defines the RPC between APM libraries and the collector
#ifndef GRPC_collector_2eproto__INCLUDED
#define GRPC_collector_2eproto__INCLUDED

#include "collector.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace collector {

// *
// Represents the trace collector service
class TraceCollector final {
 public:
  static constexpr char const* service_full_name() {
    return "collector.TraceCollector";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // post events (traces) to collector.
    virtual ::grpc::Status postEvents(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::collector::MessageResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>> AsyncpostEvents(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>>(AsyncpostEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>> PrepareAsyncpostEvents(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>>(PrepareAsyncpostEventsRaw(context, request, cq));
    }
    // post metrics (internal heartbeats, request counters, summary, runtime or custom metrics) to collector
    virtual ::grpc::Status postMetrics(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::collector::MessageResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>> AsyncpostMetrics(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>>(AsyncpostMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>> PrepareAsyncpostMetrics(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>>(PrepareAsyncpostMetricsRaw(context, request, cq));
    }
    // post [__Init](https://github.com/librato/trace/blob/master/docs/specs/KV/init.md) message to collector. May be used by APM library to validate api_key.
    virtual ::grpc::Status postStatus(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::collector::MessageResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>> AsyncpostStatus(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>>(AsyncpostStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>> PrepareAsyncpostStatus(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>>(PrepareAsyncpostStatusRaw(context, request, cq));
    }
    // get sampling and other settings for this connection.  Note the SettingsRequest requirement for HostID fields. May be used by APM library to validate api_key.
    virtual ::grpc::Status getSettings(::grpc::ClientContext* context, const ::collector::SettingsRequest& request, ::collector::SettingsResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collector::SettingsResult>> AsyncgetSettings(::grpc::ClientContext* context, const ::collector::SettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collector::SettingsResult>>(AsyncgetSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collector::SettingsResult>> PrepareAsyncgetSettings(::grpc::ClientContext* context, const ::collector::SettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collector::SettingsResult>>(PrepareAsyncgetSettingsRaw(context, request, cq));
    }
    // ping is used for keep-alive purpose. The APM library is expected to ping the collector if the connection has been idled for 20 seconds (by default). Take note that keep-alive should only be performed if the connection was previously healthy - last API call gave a response
    virtual ::grpc::Status ping(::grpc::ClientContext* context, const ::collector::PingRequest& request, ::collector::MessageResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>> Asyncping(::grpc::ClientContext* context, const ::collector::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>>(AsyncpingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>> PrepareAsyncping(::grpc::ClientContext* context, const ::collector::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>>(PrepareAsyncpingRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // post events (traces) to collector.
      virtual void postEvents(::grpc::ClientContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void postEvents(::grpc::ClientContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // post metrics (internal heartbeats, request counters, summary, runtime or custom metrics) to collector
      virtual void postMetrics(::grpc::ClientContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void postMetrics(::grpc::ClientContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // post [__Init](https://github.com/librato/trace/blob/master/docs/specs/KV/init.md) message to collector. May be used by APM library to validate api_key.
      virtual void postStatus(::grpc::ClientContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void postStatus(::grpc::ClientContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get sampling and other settings for this connection.  Note the SettingsRequest requirement for HostID fields. May be used by APM library to validate api_key.
      virtual void getSettings(::grpc::ClientContext* context, const ::collector::SettingsRequest* request, ::collector::SettingsResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getSettings(::grpc::ClientContext* context, const ::collector::SettingsRequest* request, ::collector::SettingsResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ping is used for keep-alive purpose. The APM library is expected to ping the collector if the connection has been idled for 20 seconds (by default). Take note that keep-alive should only be performed if the connection was previously healthy - last API call gave a response
      virtual void ping(::grpc::ClientContext* context, const ::collector::PingRequest* request, ::collector::MessageResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ping(::grpc::ClientContext* context, const ::collector::PingRequest* request, ::collector::MessageResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>* AsyncpostEventsRaw(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>* PrepareAsyncpostEventsRaw(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>* AsyncpostMetricsRaw(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>* PrepareAsyncpostMetricsRaw(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>* AsyncpostStatusRaw(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>* PrepareAsyncpostStatusRaw(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::collector::SettingsResult>* AsyncgetSettingsRaw(::grpc::ClientContext* context, const ::collector::SettingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::collector::SettingsResult>* PrepareAsyncgetSettingsRaw(::grpc::ClientContext* context, const ::collector::SettingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>* AsyncpingRaw(::grpc::ClientContext* context, const ::collector::PingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::collector::MessageResult>* PrepareAsyncpingRaw(::grpc::ClientContext* context, const ::collector::PingRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status postEvents(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::collector::MessageResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>> AsyncpostEvents(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>>(AsyncpostEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>> PrepareAsyncpostEvents(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>>(PrepareAsyncpostEventsRaw(context, request, cq));
    }
    ::grpc::Status postMetrics(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::collector::MessageResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>> AsyncpostMetrics(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>>(AsyncpostMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>> PrepareAsyncpostMetrics(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>>(PrepareAsyncpostMetricsRaw(context, request, cq));
    }
    ::grpc::Status postStatus(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::collector::MessageResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>> AsyncpostStatus(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>>(AsyncpostStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>> PrepareAsyncpostStatus(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>>(PrepareAsyncpostStatusRaw(context, request, cq));
    }
    ::grpc::Status getSettings(::grpc::ClientContext* context, const ::collector::SettingsRequest& request, ::collector::SettingsResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collector::SettingsResult>> AsyncgetSettings(::grpc::ClientContext* context, const ::collector::SettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collector::SettingsResult>>(AsyncgetSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collector::SettingsResult>> PrepareAsyncgetSettings(::grpc::ClientContext* context, const ::collector::SettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collector::SettingsResult>>(PrepareAsyncgetSettingsRaw(context, request, cq));
    }
    ::grpc::Status ping(::grpc::ClientContext* context, const ::collector::PingRequest& request, ::collector::MessageResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>> Asyncping(::grpc::ClientContext* context, const ::collector::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>>(AsyncpingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>> PrepareAsyncping(::grpc::ClientContext* context, const ::collector::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>>(PrepareAsyncpingRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void postEvents(::grpc::ClientContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response, std::function<void(::grpc::Status)>) override;
      void postEvents(::grpc::ClientContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void postMetrics(::grpc::ClientContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response, std::function<void(::grpc::Status)>) override;
      void postMetrics(::grpc::ClientContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void postStatus(::grpc::ClientContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response, std::function<void(::grpc::Status)>) override;
      void postStatus(::grpc::ClientContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getSettings(::grpc::ClientContext* context, const ::collector::SettingsRequest* request, ::collector::SettingsResult* response, std::function<void(::grpc::Status)>) override;
      void getSettings(::grpc::ClientContext* context, const ::collector::SettingsRequest* request, ::collector::SettingsResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ping(::grpc::ClientContext* context, const ::collector::PingRequest* request, ::collector::MessageResult* response, std::function<void(::grpc::Status)>) override;
      void ping(::grpc::ClientContext* context, const ::collector::PingRequest* request, ::collector::MessageResult* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>* AsyncpostEventsRaw(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>* PrepareAsyncpostEventsRaw(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>* AsyncpostMetricsRaw(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>* PrepareAsyncpostMetricsRaw(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>* AsyncpostStatusRaw(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>* PrepareAsyncpostStatusRaw(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::collector::SettingsResult>* AsyncgetSettingsRaw(::grpc::ClientContext* context, const ::collector::SettingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::collector::SettingsResult>* PrepareAsyncgetSettingsRaw(::grpc::ClientContext* context, const ::collector::SettingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>* AsyncpingRaw(::grpc::ClientContext* context, const ::collector::PingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::collector::MessageResult>* PrepareAsyncpingRaw(::grpc::ClientContext* context, const ::collector::PingRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_postEvents_;
    const ::grpc::internal::RpcMethod rpcmethod_postMetrics_;
    const ::grpc::internal::RpcMethod rpcmethod_postStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_getSettings_;
    const ::grpc::internal::RpcMethod rpcmethod_ping_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // post events (traces) to collector.
    virtual ::grpc::Status postEvents(::grpc::ServerContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response);
    // post metrics (internal heartbeats, request counters, summary, runtime or custom metrics) to collector
    virtual ::grpc::Status postMetrics(::grpc::ServerContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response);
    // post [__Init](https://github.com/librato/trace/blob/master/docs/specs/KV/init.md) message to collector. May be used by APM library to validate api_key.
    virtual ::grpc::Status postStatus(::grpc::ServerContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response);
    // get sampling and other settings for this connection.  Note the SettingsRequest requirement for HostID fields. May be used by APM library to validate api_key.
    virtual ::grpc::Status getSettings(::grpc::ServerContext* context, const ::collector::SettingsRequest* request, ::collector::SettingsResult* response);
    // ping is used for keep-alive purpose. The APM library is expected to ping the collector if the connection has been idled for 20 seconds (by default). Take note that keep-alive should only be performed if the connection was previously healthy - last API call gave a response
    virtual ::grpc::Status ping(::grpc::ServerContext* context, const ::collector::PingRequest* request, ::collector::MessageResult* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_postEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_postEvents() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_postEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postEvents(::grpc::ServerContext* /*context*/, const ::collector::MessageRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpostEvents(::grpc::ServerContext* context, ::collector::MessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::collector::MessageResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_postMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_postMetrics() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_postMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postMetrics(::grpc::ServerContext* /*context*/, const ::collector::MessageRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpostMetrics(::grpc::ServerContext* context, ::collector::MessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::collector::MessageResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_postStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_postStatus() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_postStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postStatus(::grpc::ServerContext* /*context*/, const ::collector::MessageRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpostStatus(::grpc::ServerContext* context, ::collector::MessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::collector::MessageResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getSettings() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSettings(::grpc::ServerContext* /*context*/, const ::collector::SettingsRequest* /*request*/, ::collector::SettingsResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetSettings(::grpc::ServerContext* context, ::collector::SettingsRequest* request, ::grpc::ServerAsyncResponseWriter< ::collector::SettingsResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ping() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ping(::grpc::ServerContext* /*context*/, const ::collector::PingRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestping(::grpc::ServerContext* context, ::collector::PingRequest* request, ::grpc::ServerAsyncResponseWriter< ::collector::MessageResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_postEvents<WithAsyncMethod_postMetrics<WithAsyncMethod_postStatus<WithAsyncMethod_getSettings<WithAsyncMethod_ping<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_postEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_postEvents() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::collector::MessageRequest, ::collector::MessageResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response) { return this->postEvents(context, request, response); }));}
    void SetMessageAllocatorFor_postEvents(
        ::grpc::MessageAllocator< ::collector::MessageRequest, ::collector::MessageResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::collector::MessageRequest, ::collector::MessageResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_postEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postEvents(::grpc::ServerContext* /*context*/, const ::collector::MessageRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* postEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::collector::MessageRequest* /*request*/, ::collector::MessageResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_postMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_postMetrics() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::collector::MessageRequest, ::collector::MessageResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response) { return this->postMetrics(context, request, response); }));}
    void SetMessageAllocatorFor_postMetrics(
        ::grpc::MessageAllocator< ::collector::MessageRequest, ::collector::MessageResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::collector::MessageRequest, ::collector::MessageResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_postMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postMetrics(::grpc::ServerContext* /*context*/, const ::collector::MessageRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* postMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::collector::MessageRequest* /*request*/, ::collector::MessageResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_postStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_postStatus() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::collector::MessageRequest, ::collector::MessageResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response) { return this->postStatus(context, request, response); }));}
    void SetMessageAllocatorFor_postStatus(
        ::grpc::MessageAllocator< ::collector::MessageRequest, ::collector::MessageResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::collector::MessageRequest, ::collector::MessageResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_postStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postStatus(::grpc::ServerContext* /*context*/, const ::collector::MessageRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* postStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::collector::MessageRequest* /*request*/, ::collector::MessageResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getSettings() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::collector::SettingsRequest, ::collector::SettingsResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::collector::SettingsRequest* request, ::collector::SettingsResult* response) { return this->getSettings(context, request, response); }));}
    void SetMessageAllocatorFor_getSettings(
        ::grpc::MessageAllocator< ::collector::SettingsRequest, ::collector::SettingsResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::collector::SettingsRequest, ::collector::SettingsResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSettings(::grpc::ServerContext* /*context*/, const ::collector::SettingsRequest* /*request*/, ::collector::SettingsResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::collector::SettingsRequest* /*request*/, ::collector::SettingsResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ping() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::collector::PingRequest, ::collector::MessageResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::collector::PingRequest* request, ::collector::MessageResult* response) { return this->ping(context, request, response); }));}
    void SetMessageAllocatorFor_ping(
        ::grpc::MessageAllocator< ::collector::PingRequest, ::collector::MessageResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::collector::PingRequest, ::collector::MessageResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ping(::grpc::ServerContext* /*context*/, const ::collector::PingRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ping(
      ::grpc::CallbackServerContext* /*context*/, const ::collector::PingRequest* /*request*/, ::collector::MessageResult* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_postEvents<WithCallbackMethod_postMetrics<WithCallbackMethod_postStatus<WithCallbackMethod_getSettings<WithCallbackMethod_ping<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_postEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_postEvents() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_postEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postEvents(::grpc::ServerContext* /*context*/, const ::collector::MessageRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_postMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_postMetrics() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_postMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postMetrics(::grpc::ServerContext* /*context*/, const ::collector::MessageRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_postStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_postStatus() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_postStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postStatus(::grpc::ServerContext* /*context*/, const ::collector::MessageRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getSettings() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSettings(::grpc::ServerContext* /*context*/, const ::collector::SettingsRequest* /*request*/, ::collector::SettingsResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ping() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ping(::grpc::ServerContext* /*context*/, const ::collector::PingRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_postEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_postEvents() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_postEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postEvents(::grpc::ServerContext* /*context*/, const ::collector::MessageRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpostEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_postMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_postMetrics() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_postMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postMetrics(::grpc::ServerContext* /*context*/, const ::collector::MessageRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpostMetrics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_postStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_postStatus() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_postStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postStatus(::grpc::ServerContext* /*context*/, const ::collector::MessageRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpostStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getSettings() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSettings(::grpc::ServerContext* /*context*/, const ::collector::SettingsRequest* /*request*/, ::collector::SettingsResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetSettings(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ping() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ping(::grpc::ServerContext* /*context*/, const ::collector::PingRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestping(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_postEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_postEvents() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->postEvents(context, request, response); }));
    }
    ~WithRawCallbackMethod_postEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postEvents(::grpc::ServerContext* /*context*/, const ::collector::MessageRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* postEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_postMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_postMetrics() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->postMetrics(context, request, response); }));
    }
    ~WithRawCallbackMethod_postMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postMetrics(::grpc::ServerContext* /*context*/, const ::collector::MessageRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* postMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_postStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_postStatus() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->postStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_postStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postStatus(::grpc::ServerContext* /*context*/, const ::collector::MessageRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* postStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getSettings() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getSettings(context, request, response); }));
    }
    ~WithRawCallbackMethod_getSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSettings(::grpc::ServerContext* /*context*/, const ::collector::SettingsRequest* /*request*/, ::collector::SettingsResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ping() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ping(context, request, response); }));
    }
    ~WithRawCallbackMethod_ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ping(::grpc::ServerContext* /*context*/, const ::collector::PingRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ping(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_postEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_postEvents() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::collector::MessageRequest, ::collector::MessageResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::collector::MessageRequest, ::collector::MessageResult>* streamer) {
                       return this->StreamedpostEvents(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_postEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status postEvents(::grpc::ServerContext* /*context*/, const ::collector::MessageRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedpostEvents(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::collector::MessageRequest,::collector::MessageResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_postMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_postMetrics() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::collector::MessageRequest, ::collector::MessageResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::collector::MessageRequest, ::collector::MessageResult>* streamer) {
                       return this->StreamedpostMetrics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_postMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status postMetrics(::grpc::ServerContext* /*context*/, const ::collector::MessageRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedpostMetrics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::collector::MessageRequest,::collector::MessageResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_postStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_postStatus() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::collector::MessageRequest, ::collector::MessageResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::collector::MessageRequest, ::collector::MessageResult>* streamer) {
                       return this->StreamedpostStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_postStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status postStatus(::grpc::ServerContext* /*context*/, const ::collector::MessageRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedpostStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::collector::MessageRequest,::collector::MessageResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getSettings() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::collector::SettingsRequest, ::collector::SettingsResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::collector::SettingsRequest, ::collector::SettingsResult>* streamer) {
                       return this->StreamedgetSettings(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getSettings(::grpc::ServerContext* /*context*/, const ::collector::SettingsRequest* /*request*/, ::collector::SettingsResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetSettings(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::collector::SettingsRequest,::collector::SettingsResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ping() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::collector::PingRequest, ::collector::MessageResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::collector::PingRequest, ::collector::MessageResult>* streamer) {
                       return this->Streamedping(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ping(::grpc::ServerContext* /*context*/, const ::collector::PingRequest* /*request*/, ::collector::MessageResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedping(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::collector::PingRequest,::collector::MessageResult>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_postEvents<WithStreamedUnaryMethod_postMetrics<WithStreamedUnaryMethod_postStatus<WithStreamedUnaryMethod_getSettings<WithStreamedUnaryMethod_ping<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_postEvents<WithStreamedUnaryMethod_postMetrics<WithStreamedUnaryMethod_postStatus<WithStreamedUnaryMethod_getSettings<WithStreamedUnaryMethod_ping<Service > > > > > StreamedService;
};

}  // namespace collector


#endif  // GRPC_collector_2eproto__INCLUDED
