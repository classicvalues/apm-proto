// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: collector.proto

#include "collector.pb.h"
#include "collector.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace collector {

static const char* TraceCollector_method_names[] = {
  "/collector.TraceCollector/postEvents",
  "/collector.TraceCollector/postMetrics",
  "/collector.TraceCollector/postStatus",
  "/collector.TraceCollector/getSettings",
  "/collector.TraceCollector/ping",
};

std::unique_ptr< TraceCollector::Stub> TraceCollector::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TraceCollector::Stub> stub(new TraceCollector::Stub(channel, options));
  return stub;
}

TraceCollector::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_postEvents_(TraceCollector_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_postMetrics_(TraceCollector_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_postStatus_(TraceCollector_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getSettings_(TraceCollector_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ping_(TraceCollector_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TraceCollector::Stub::postEvents(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::collector::MessageResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::collector::MessageRequest, ::collector::MessageResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_postEvents_, context, request, response);
}

void TraceCollector::Stub::async::postEvents(::grpc::ClientContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::collector::MessageRequest, ::collector::MessageResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_postEvents_, context, request, response, std::move(f));
}

void TraceCollector::Stub::async::postEvents(::grpc::ClientContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_postEvents_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::collector::MessageResult>* TraceCollector::Stub::PrepareAsyncpostEventsRaw(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::collector::MessageResult, ::collector::MessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_postEvents_, context, request);
}

::grpc::ClientAsyncResponseReader< ::collector::MessageResult>* TraceCollector::Stub::AsyncpostEventsRaw(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpostEventsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TraceCollector::Stub::postMetrics(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::collector::MessageResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::collector::MessageRequest, ::collector::MessageResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_postMetrics_, context, request, response);
}

void TraceCollector::Stub::async::postMetrics(::grpc::ClientContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::collector::MessageRequest, ::collector::MessageResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_postMetrics_, context, request, response, std::move(f));
}

void TraceCollector::Stub::async::postMetrics(::grpc::ClientContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_postMetrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::collector::MessageResult>* TraceCollector::Stub::PrepareAsyncpostMetricsRaw(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::collector::MessageResult, ::collector::MessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_postMetrics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::collector::MessageResult>* TraceCollector::Stub::AsyncpostMetricsRaw(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpostMetricsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TraceCollector::Stub::postStatus(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::collector::MessageResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::collector::MessageRequest, ::collector::MessageResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_postStatus_, context, request, response);
}

void TraceCollector::Stub::async::postStatus(::grpc::ClientContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::collector::MessageRequest, ::collector::MessageResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_postStatus_, context, request, response, std::move(f));
}

void TraceCollector::Stub::async::postStatus(::grpc::ClientContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_postStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::collector::MessageResult>* TraceCollector::Stub::PrepareAsyncpostStatusRaw(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::collector::MessageResult, ::collector::MessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_postStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::collector::MessageResult>* TraceCollector::Stub::AsyncpostStatusRaw(::grpc::ClientContext* context, const ::collector::MessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpostStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TraceCollector::Stub::getSettings(::grpc::ClientContext* context, const ::collector::SettingsRequest& request, ::collector::SettingsResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::collector::SettingsRequest, ::collector::SettingsResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getSettings_, context, request, response);
}

void TraceCollector::Stub::async::getSettings(::grpc::ClientContext* context, const ::collector::SettingsRequest* request, ::collector::SettingsResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::collector::SettingsRequest, ::collector::SettingsResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getSettings_, context, request, response, std::move(f));
}

void TraceCollector::Stub::async::getSettings(::grpc::ClientContext* context, const ::collector::SettingsRequest* request, ::collector::SettingsResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getSettings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::collector::SettingsResult>* TraceCollector::Stub::PrepareAsyncgetSettingsRaw(::grpc::ClientContext* context, const ::collector::SettingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::collector::SettingsResult, ::collector::SettingsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getSettings_, context, request);
}

::grpc::ClientAsyncResponseReader< ::collector::SettingsResult>* TraceCollector::Stub::AsyncgetSettingsRaw(::grpc::ClientContext* context, const ::collector::SettingsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetSettingsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TraceCollector::Stub::ping(::grpc::ClientContext* context, const ::collector::PingRequest& request, ::collector::MessageResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::collector::PingRequest, ::collector::MessageResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ping_, context, request, response);
}

void TraceCollector::Stub::async::ping(::grpc::ClientContext* context, const ::collector::PingRequest* request, ::collector::MessageResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::collector::PingRequest, ::collector::MessageResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ping_, context, request, response, std::move(f));
}

void TraceCollector::Stub::async::ping(::grpc::ClientContext* context, const ::collector::PingRequest* request, ::collector::MessageResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::collector::MessageResult>* TraceCollector::Stub::PrepareAsyncpingRaw(::grpc::ClientContext* context, const ::collector::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::collector::MessageResult, ::collector::PingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::collector::MessageResult>* TraceCollector::Stub::AsyncpingRaw(::grpc::ClientContext* context, const ::collector::PingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpingRaw(context, request, cq);
  result->StartCall();
  return result;
}

TraceCollector::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TraceCollector_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TraceCollector::Service, ::collector::MessageRequest, ::collector::MessageResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TraceCollector::Service* service,
             ::grpc::ServerContext* ctx,
             const ::collector::MessageRequest* req,
             ::collector::MessageResult* resp) {
               return service->postEvents(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TraceCollector_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TraceCollector::Service, ::collector::MessageRequest, ::collector::MessageResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TraceCollector::Service* service,
             ::grpc::ServerContext* ctx,
             const ::collector::MessageRequest* req,
             ::collector::MessageResult* resp) {
               return service->postMetrics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TraceCollector_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TraceCollector::Service, ::collector::MessageRequest, ::collector::MessageResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TraceCollector::Service* service,
             ::grpc::ServerContext* ctx,
             const ::collector::MessageRequest* req,
             ::collector::MessageResult* resp) {
               return service->postStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TraceCollector_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TraceCollector::Service, ::collector::SettingsRequest, ::collector::SettingsResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TraceCollector::Service* service,
             ::grpc::ServerContext* ctx,
             const ::collector::SettingsRequest* req,
             ::collector::SettingsResult* resp) {
               return service->getSettings(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TraceCollector_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TraceCollector::Service, ::collector::PingRequest, ::collector::MessageResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TraceCollector::Service* service,
             ::grpc::ServerContext* ctx,
             const ::collector::PingRequest* req,
             ::collector::MessageResult* resp) {
               return service->ping(ctx, req, resp);
             }, this)));
}

TraceCollector::Service::~Service() {
}

::grpc::Status TraceCollector::Service::postEvents(::grpc::ServerContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TraceCollector::Service::postMetrics(::grpc::ServerContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TraceCollector::Service::postStatus(::grpc::ServerContext* context, const ::collector::MessageRequest* request, ::collector::MessageResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TraceCollector::Service::getSettings(::grpc::ServerContext* context, const ::collector::SettingsRequest* request, ::collector::SettingsResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TraceCollector::Service::ping(::grpc::ServerContext* context, const ::collector::PingRequest* request, ::collector::MessageResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace collector

